<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:jdbc="http://www.springframework.org/schema/jdbc"  
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
  xmlns:aop="http://www.springframework.org/schema/aop" 
  xmlns:mongo="http://www.springframework.org/schema/data/mongo"
	xsi:schemaLocation="
	    http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo-1.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd		
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd"
	>
    <!-- 配置扫瞄注解service,controller -->  
	<description>Spring公共配置 </description>
	<!-- 定义受环境影响易变的变量 -->
	<bean  id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<!-- 标准配置 -->
			  <value>classpath*:/conf/hibernate/hibernate.properties</value>  
			</list>
		</property>
	</bean>
	
    <!-- 使Spring关注Annotation -->
    <context:annotation-config/>  
    
	<!-- <aop:aspectj-autoproxy/>-->
    <!-- 让Spring通过自动扫描来查询和管理Bean -->
	<!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
	<context:component-scan base-package="com.whut">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	

	<!-- 数据源配置,使用应用内的DBCP数据库连接池 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${jdbc.driver}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="autoCommitOnClose" value="true" />
		<property name="checkoutTimeout" value="${cpool.checkoutTimeout}" />
		<property name="initialPoolSize" value="${cpool.minPoolSize}" />
		<property name="minPoolSize" value="${cpool.minPoolSize}" />
		<property name="maxPoolSize" value="${cpool.maxPoolSize}" />
		<property name="maxIdleTime" value="${cpool.maxIdleTime}" />
		<property name="acquireIncrement" value="${cpool.acquireIncrement}" />
		<property name="maxIdleTimeExcessConnections" value="${cpool.maxIdleTimeExcessConnections}" />
	</bean> 

	<!-- Hibernate配置 -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocations">
			<list>
				<value>classpath*:/conf/hibernate/hibernate.cfg.*.xml</value>
			</list>
		</property> 
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<!-- 先不用缓存 -->
				<!-- <prop key="hibernate.cache.provider_class">net.sf.ehcache.hibernate.EhCacheProviderr</prop>
				<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>				
				<prop key="hibernate.cache.provider_configuration_file_resource_path">ehcache/ehcache-hibernate-local.xml</prop> -->
				<prop key="current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop> 
				<prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop> 
       <!-- <prop key="hibernate.cache.use_second_level_cache">true</prop> -->
        <!-- <prop key="hibernate.cache.use_query_cache">true</prop> 
        <prop key="jdbc.use_scrollable_resultset">false</prop> -->
       <prop key="hibernate.transaction.auto_close_session">false</prop>
			</props>
		</property> 
	</bean> 
  
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"> 
      <property name="dataSource" ref="dataSource"/> 
    </bean>  
	 <!-- 配置事务管理器 -->
	<!-- 事务管理器配置,单数据源事务 混用jdbcTemplage和hibernate事务
	 要使用org.springframework.orm.hibernate3.HibernateTransactionManager -->
	<!-- <bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean> -->

	<!-- 使用annotation定义事务 这里是开启事务，用的是注解
	用配置文件的好处，是事务声明比较集中，不需要在每个Service层接口上单独声明。缺点是Service中的方法，命名规范需要事先约定好，否则事务就不能生效

用注解的好处，是Service中的方法命名不需要特别规定，缺点是没有做到集中声明，如果在某个Service层的接口忘记声明事务，那么事务就无法生效
 -->
 <!--
		This marker creates the full auto-proxy infrastructure
		that is necessary for applying Spring's Transactional annotation
		(as contained in the PetStoreAnnotationImpl class). By default,
		it will refer to the transaction manager bean named "transactionManager".
	-->
 
	<!-- <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" /> -->
  
    <!-- 配置事务的传播特性  
                        声明式容器管理事务
                  建议使用声明式容器管理事务，而不建议使用注解容器管理事务（虽然简单）
                  ，但太分布式了，采用声明式容器管理事务一般只对service层进行处理。-->   
   <!-- <tx:advice id="txAdvice" transaction-manager="transactionManager">   
        <tx:attributes>   
           <tx:method name="create*" propagation="REQUIRED" />  
            <tx:method name="save*" propagation="REQUIRED" />  
            <tx:method name="update*" propagation="REQUIRED" />   
            <tx:method name="delete*" propagation="REQUIRED" />  
            所有以list开始的方法是只读
        <tx:method name="save*" propagation="REQUIRED" />  
        <tx:method name="add*" propagation="REQUIRED" />  
        <tx:method name="create*" propagation="REQUIRED" />  
        <tx:method name="insert*" propagation="REQUIRED" />  
        <tx:method name="update*" propagation="REQUIRED" />  
        <tx:method name="del*" propagation="REQUIRED" />  
        <tx:method name="remove*" propagation="REQUIRED" />  
        hibernate4必须配置为开启事务 否则 getCurrentSession()获取不到  
        <tx:method name="get*" propagation="REQUIRED" read-only="true" />   
        <tx:method name="find*" propagation="REQUIRED" read-only="true" />  
        <tx:method name="list*" propagation="REQUIRED" read-only="true" />  
        <tx:method name="*" read-only="true" />   
        </tx:attributes>   
    </tx:advice>    -->
    <!-- 只对业务逻辑层实施事务  --> 
     <!-- <aop:config> 
      <aop:advisor pointcut="execution(* com.ids.example.logic.*Logic.*(..))" advice-ref="txAdvice"/>
		  <aop:advisor pointcut="execution(* com.navinfo.core.orm.hibernate.*Dao.*(..))" advice-ref="txAdvice"/>
          <aop:advisor pointcut="execution(* com.navinfo.core.service.*Logic.*(..))" advice-ref="txAdvice"/> 
   </aop:config>  -->
    
 
    <!-- 那些类的哪些方法参与事务
    只是使用 @Transactional 注解并不会启用事务行为， 
    它仅仅 是一种元数据，能够被可以识别 @Transactional 注解和上述的配置适当的具有事务行为的beans所使用
    只在具体的类上使用 @Transactional 注解， 而不要注解在接口上
    方法的事务设置将被优先执行
    默认的 @Transactional 设置如下：  
事务传播设置是 PROPAGATION_REQUIRED 
事务隔离级别是 ISOLATION_DEFAULT 
事务是 读/写 
事务超时默认是依赖于事务系统的，或者事务超时没有被支持。 
任何 RuntimeException 将触发事务回滚，但是任何 checked Exception 将不触发事务回滚 
    -->
 
  
		<!-- SpringContextHandler定义 -->
	<!-- <bean class="com.navinfo.core.SpringContextHolder" lazy-init="false"/> -->

	<!-- JSR303 Validator定义 -->
 	<!-- <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" /> -->
	 
	
	
 
</beans>